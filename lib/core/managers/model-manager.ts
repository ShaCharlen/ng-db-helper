import { DbTable } from '../models/structure/db-table.model';
import { DbHelperModel } from '../models/db-helper-model.model';
import { DataModel } from '../models/structure/data-model.model';
import { BadColumnDeclarationError } from '../errors/bad-column-declaration.error';
import { BadTableDeclarationError } from '../errors/bad-table-declaration.error';

/**
 * @private API
 * @class ModelManager, this class is a singleton collecting data model
 * This manager has not to be exposed, it is used to provide DataModel
 * every time it is necessary
 *
 * @author  Olivier Margarit
 * @since   0.1
 */
export class ModelManager {
    /**
     * @static
     * @public
     * @property version of the current data model, this is provided by the
     * module configuration
     */
    public static version = '';

    /**
     * @static
     * @private
     * @property instance, private reference to the model manager instance
     */
    private static instance = new ModelManager();

    /**
     * @private
     * @property tables, hashmap of table names to their datamodel
     */
    private tables: { [index: string]: DbTable } = {};

    /**
     * @private
     * @property models, hashmap of model names with theirs linked table name
     */
    private models: { [index: string]: string } = {};

    /**
     * @static
     * @public
     * @method getInstance, methode that return the manager instance
     *
     * @return ModelManager unique instance
     */
    public static getInstance() {
        return ModelManager.instance;
    }

    /**
     * @public
     * @method addModel this method is part of private API, it is called by
     * decorator to add new table to model
     *
     * @param newModel model extending DbHelperModel
     */
    public addModel(dbTable: DbTable) {
        this.tables[dbTable.name] = dbTable;
        this.models[dbTable.modelName] = dbTable.name;
    }

    /**
     * @public
     * @method getColumnNameForField is a part of the private API
     * This method is called by column decorators to add field to
     * the Ddate model tables
     *
     * @param model      model extending DbHelperModel
     * @param fieldName  field to add to the model table
     */
    public getColumnNameForField(model: { new(): DbHelperModel }, fieldName: string): string {
        if (!this.models.hasOwnProperty(model.name)) {
            const error = new BadColumnDeclarationError('Did you forget to declare model: ' +
                model.name + '\n Check @Table déclaration on this model');
            throw(error);
        }
        const tableName = this.models[model.name];
        const table = this.tables[tableName];

        if (!table.fields.hasOwnProperty(fieldName)) {
            const error = new BadTableDeclarationError('Did you forget to declare column for field "' +
            fieldName + '" of model "' + model.name + ' - tableName : ' +  tableName + ' table : ' + table + '' +
            '"\n Check @Column déclaration on this model');
            throw(error);
        }
        return table.fields[fieldName].name;
    }

    /**
     * @public
     * @method getDataModel get datamodel for model migrations
     *
     * @return DataModel generated by decorators
     */
    public getDataModel(): DataModel {
        return new DataModel(this.tables);
    }

    /**
     * @public
     * @method getModelCount return the number of model with decorators
     * This method is used to comput minor version of the DataModel to automigrate
     * the model. The feature is deactivable from config.
     *
     * @return the number of table
     */
    public getModelCount(): number {
        return Object.getOwnPropertyNames(this.models).length;
    }

    /**
     * @public
     * @method getModel this is a private API to get model and use it to build queries
     *
     * @param model model extending DbHelperModel
     */
    public getModel(model: string | DbHelperModel | {new(): DbHelperModel }): DbTable {
        if (model instanceof String) {
            return this.tables[model];
        } else if (model instanceof DbHelperModel) {
            return this.tables[this.getTable(model.constructor as {new(): DbHelperModel})];
        } else {
            return this.tables[this.getTable(model)];
        }
    }

    /**
     * @public
     * @method getTables return the table name linked to the model
     *
     * @param model model extending DbHelperModel
     */
    public getTable(model: {new(): DbHelperModel }): string {
        return this.models[model.name];
    }
}
